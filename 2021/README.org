#+title: 2021 Advent of code solutions
#+author: Matthias Paulmier

* Utils

#+begin_src emacs-lisp
  (defun mp/file-content (filename)
    (with-temp-buffer
      (insert-file-contents filename)
      (string-trim
       (buffer-substring-no-properties
        (point-min)
        (point-max)))))

  (defmacro defsolution (day parser &rest part1 part2)
    "Utility macro that preloads the input of the DAY.

  PARSER is a function that takes a string argument corresponding to the DAY's input.

  Returns the result of PART1 and PART2 in a list"
    `(let* ((url (concat (concat "https://adventofcode.com/2021/day/" (int-to-string ,day)) "/input"))
            (lexical-binding t)
            (filename (concat "inputs/" (int-to-string ,day)))
            (cookie (mp/file-content "../session-cookie.txt"))
            (url-request-extra-headers
             (list (cons "Cookie" cookie))))
       (if (not (file-exists-p filename))
           (url-copy-file url filename))

       ;; Load data into input list
       (let ((input (funcall #'parser (mp/file-content filename))))
         (list ,@part1 ,@part2))))
#+end_src

* Day 1

#+begin_src emacs-lisp
  (defun count-depth-increases (depths)
    (let ((prev (car depths)))
      (cl-loop for depth in (cdr depths)
               if (> depth prev) count depth
               do (setq prev depth))))

  (defun day1-parser (content)
    (mapcar #'string-to-number
            (split-string content "\n" t)))

  (defsolution 1 #'day1-parser
    ;; part 1
    (count-depth-increases input)
    ;; part 2
    (progn
      (let ((sums (cl-loop for (a b c) on input
                           while (not (null c))
                           collect (+ a b c))))
        (count-depth-increases sums))))
#+end_src
